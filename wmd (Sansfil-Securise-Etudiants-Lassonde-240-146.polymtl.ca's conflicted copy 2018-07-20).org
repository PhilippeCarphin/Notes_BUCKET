#+TITLE: Wha'm I doing

* Current action

Environment analyser:

INPUT : A command

OUTPUT : A diff between the environment before an after the command

Both environments are preprocessed so that we can visualize well the difference
between PATH before and after.

Since this is persistent, I have to save it to files.

COMMAND
-> '(( env ), (env-after COMMAND)), COMMAND
-> (diff env-before env-after) 
-> (org-diff-command-view COMMAND ..)
#+BEGIN_SRC diff
diff --git a/general-aliases b/general-aliases
index 64a1c23..14b55f3 100644
--- a/general-aliases
+++ b/general-aliases
@@ -43,7 +43,7 @@ alias new-repo='source new-repo.sh'
 
 # Opens the master PDF documenation for ATMega324PA assuming it is
 # at this path.
-alias docatmel='open ~/Documents/References/docatmel.pdf 2>/dev/null &'
+alias docatmel='open ~/Documents/docatmel.pdf 2>/dev/null &'
 
 # OS specific commands
 if [ $(uname) = Linux ]; then
#+END_SRC
#+BEGIN_SRC elisp
(defun org-show-diff-from-command (COMMAND)
  (concat (org-preamble) (org-display-src 'sh COMMAND)
          (org-middle)
          (org-surround-src 'diff
                            (get-env-diff COMMAND))
          (org-post-amble)))

(defun get-env-diff (COMMAND) ()
       )
#+END_SRC
* Past
*** DONE Spend 1h on org-capture
    CLOSED: [2018-07-19 Thu 03:14]
*** DONE Spend 1h investing ideas about micro time management assistance
    CLOSED: [2018-07-19 Thu 03:14]
I'm at work, doing something, and I want to look into something.  I want
something that will let me specify that I want to spend "X amount of time on it"

I would also want something that helps me keep the content of my wmd.org file
accurate.  Like I get to work, fire up emacs and a popup asks me "What are you
doing" and puts me in my wmd file.

Emacs should also know to ask me "What are you doing" when it notices certain
events.  Like for example if I make a commit, it would go "You made a commit,
does that change what you're doing.

*SEE POMODORO TECHNIQUE*

**** DONE Emacs pesters me after some event
     CLOSED: [2018-07-15 Sun 02:03]

Make emacs do (message "What are yo doing right now") whenever the some kind of
thing happens.  
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks.html#Hooks][Emacs doc : Hooks]]

Running this expression will cause the message to be displayed when a buffer is
saved.

#+BEGIN_SRC lisp
(add-hook 'after-save-hook (lambda () (message "You just saved bitch")))
#+END_SRC

But only if there is an acutal save that happens.  If the buffer is not
modified, then going :w will not make the message appear.
**** TODO Make a "Ask me what I'm doing" function
Open my wmd file and another buffer asking me to answer 'y or n' to "is this
still what you're doing" and if I press "n" it brings me into the wmd file,
otherwise it restores everything like it was before it bothered me.
***** TODO The function opens my wmd file
***** TODO The function asks me for 'y or n' in whatever way
***** TODO The function reacts to the answer
***** TODO The function resets all buffers if "n"
***** TODO The function, in case of y does something so that after I edit my wmd file, my layout goes back to the way it was before all this.
**** TODO Make a function that will do a bunch of (add-hook )
This is where I will put all the add-hook's for all the hook for all the events
that I want to have generate a "Bother me and ask me what I'm doing" requests.
** Make new-note command
#+BEGIN_SRC lisp
(defun new-note (name)
  (switch-to-buffer (concat "~/Dropbox/Notes/Notes_BUCKET/Notes_" name ".org"))
  (org-mode)
  (evil-insert-state)
  (yas-insert-snippet "nn"))

(new-note "BONER")
#+END_SRC

#+BEGIN_SRC lisp
(defun new-note-command (name)
  (interactive
   (list
    (read-string "New note name : "
                 (apply #'concat (map 'list #'int-to-string (calendar-current-date))))))
  (new-note name)) 
#+END_SRC

** Setting indentation in c mode (and other modes)
** Learn about projectile
** Installing Wakatime
** Integrating surround function to spacemacs config
** Installing wakatime with vim
** Get snippets under version control
- [X] Setup the directory
- [X] Add to install script
- [X] Commit
  
** Deploy Heroku app

*** DONE Heroku info
    CLOSED: [2018-07-14 Sat 02:24]
Basically,
heroku login
heroku create
git push heroku master

https://github.com/datademofun/heroku-basic-flask

A heroku app has a requirements.txt like produced by pip freeze, a runtime.txt
file that says which version of python I want.

A Procfile that contains the line
web: <The command to start run my app>

I changed my run.py in an erratic way because I thought that file's name or
structure was significant to heroku until I found out that it was in the
procfile that I was to specify how to start the program.
*** TODO Godaddy 
Figure out what I need to do to get godaddy stuff happening.






