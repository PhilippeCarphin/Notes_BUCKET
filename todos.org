#+TITLE: This is the main todo inbox


* Main Todo List

** Incoming todos
A place where Todos get put until I find a place to put them intelligently

*** TODO org-mode check if I can block SRC blocks from being run
 if, say, I press C-c C-c on a block that wasn't meant to be run.
    [2018-07-18 Wed]
*** TODO Idea : Regular lectures at Poly where I dish out wisdom 
    [2018-07-18 Wed]

 In the same way as high school doesn't teach us how to handle money, do time
 management, do our taxes and general /stuff that every grown up should know/, I
 want to interact with interested students about /stuff that every grown up
 programmer should know/ like having a github account, organizing your knowledge,
 organizing your tasks.  Mastering your programming environment and whatever else
 I think someone who wants to have an edge should know.

 The ideal format would be that I come up with a loose idea of what I want to
 talk about, and mostly the students would drive the show with questions.

 Topics could include
 - git
 - bash
 - NOTE TAKING, DOCUMENTATION (org-mode)
 - Don't learn just what's in the exams
 - my take on HPR
 - coding example
 - Programming languages
 - emacs, vim, tmux (ideas of conceptual changes like "change word" and stuff like that)
 - etc...
*** TODO Make this line in my dotspacemacs do what I want
[[file:~/.philconfig/spacemacs::(setq-default%20org-default-notes-file%20"~/Dropbox/Notes/Notes_BUCKET/org-capture.org")]]
It doesn't seem do have any effect.
*** TODO File this code:
#+BEGIN_SRC c
int parse_org()
{
   while(l = getline()){
      heading_level = get_heading_level(l);

      if(heading_level == 0){ }

      if(heading_level >= current_heading){
         return;
      } else {
         current_node.add(parse_org(heading_level))
      }

   }

}


class OrgNode {
   std::string heading_text;
   int heading_level;
   std::string node_text;
   std::vector<OrgNode> children;

   OrgNode(std::string heading_text, int heading_level)
      :heading_text(heading_text), node_text("")
      {}
   void print_toc(){
      std::string indent = "";
      for(int i = 0; i < heading_level; ++i){
         indent += " ";
      }
      print(indent + heading_text);
      for(child : children){
         child.print_toc();
      }
   }
}


class OrgDocument {
   std::string root_text;
   std::vector<OrgNode> nodes;
}

class Parser {
   OrgNode *current_node;
   int current_heading_level;
   std::stack<OrgNode*> path_to_current_node;

   OrgDocument parse_org_file(filename)
   {
      while((line = getline()) != EOF){
         int depth = get_heading_level(line);
         if(depth == 0){
            append_text(current_node, line);
            continue;
         }

         OrgNode *child = new OrgNode(line);

         while(current_node.depth >= depth){
            current_node = path_to_current_node.pop();
         }

         current_node.add_child(child);
      }
   }
   void print_table_of_contents(OrgNode node)
   {
      print(node.heading_text);
      for(child : current_node.children){
         print_table_of_contents(child);
      }
   }
}

int main(void)
{
   // 
}
#+END_SRC

** First
   
*** TODO Spend a pommodoro checking out =ox-twbs=
 It's the thing that does org-mode \rightarrow twitter bootstrap.
 https://www.youtube.com/watch?v=SzA2YODtgK4&t=713s at arount 45 minutes

*** TODO Have regular backups
*** TODO Get better at Go
    :PROPERTIES:
    :ID:       8A3E4C8F-F421-4EB9-8823-9DA3C09B9975
    :END:
*** FROM org-mobile-inbox.org
*** TODO Orgmode file for debts to collect
    :PROPERTIES:
    :ID:       ACF1968E-B3EE-4FB0-8942-D4E11407D827
    :END:
  [2018-07-15 Sun 05:00]
*** TODO Go through recent photos for GTD quotes
    :PROPERTIES:
    :ID:       B130EF6A-C583-4C06-A5DB-0345F79F3647
    :END:
  [2018-07-14 Sat 23:42]
  “To be confident that whatever you’re doing at the moment is what you need to be doing.
*** TODO Recommendation from David Allen GTD for the book “The Power of Habit” by Charles Duhiggs. 
     :PROPERTIES:
     :ID:       3F91848B-144D-4233-9503-862E4619A01F
     :END:
   [2018-07-14 Sat 23:20]
   Willpower: Rediscovering the greatest human strength.
   By Roy Baumeister and John Tierney.
*** TODO backup external hard drive. 
    :PROPERTIES:
    :ID:       722A1711-7227-4562-8BB4-EBC8B167A9A5
    :END:
  [2018-07-07 Sat 14:15]
*** TODO sable polymer 48.25 
    :PROPERTIES:
    :ID:       97E71E37-985A-4D3F-A1FA-13364D98D4EF
    :END:
  [2018-07-07 Sat 11:57]

*** TODO Spend 1h investing ideas about micro time management assistance
    :PROPERTIES:
    :ID:       5F7AB2B3-059D-4982-8B31-893B28A453E2
    :END:
I'm at work, doing something, and I want to look into something.  I want
something that will let me specify that I want to spend "X amount of time on it"

I would also want something that helps me keep the content of my wmd.org file
accurate.  Like I get to work, fire up emacs and a popup asks me "What are you
doing" and puts me in my wmd file.

Emacs should also know to ask me "What are you doing" when it notices certain
events.  Like for example if I make a commit, it would go "You made a commit,
does that change what you're doing.

**** DONE Emacs pesters me after some event
     CLOSED: [2018-07-15 Sun 02:03]

Make emacs do (message "What are yo doing right now") whenever the some kind of
thing happens.  
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks.html#Hooks][Emacs doc : Hooks]]

Running this expression will cause the message to be displayed when a buffer is
saved.

#+BEGIN_SRC lisp
(add-hook 'after-save-hook (lambda () (message "You just saved bitch")))
#+END_SRC

But only if there is an acutal save that happens.  If the buffer is not
modified, then going :w will not make the message appear.
**** TODO Make a "Ask me what I'm doing" function
     :PROPERTIES:
     :ID:       3FFEE6F0-CC11-491B-9213-CB81C135FD0C
     :END:
Open my wmd file and another buffer asking me to answer 'y or n' to "is this
still what you're doing" and if I press "n" it brings me into the wmd file,
otherwise it restores everything like it was before it bothered me.
***** TODO The function opens my wmd file
      :PROPERTIES:
      :ID:       D1FEDE68-BD6C-4B61-B71B-ACF7D3AF9411
      :END:
***** TODO The function asks me for 'y or n' in whatever way
      :PROPERTIES:
      :ID:       33988472-632E-44D4-8336-9E64DB531FED
      :END:
***** TODO The function reacts to the answer
      :PROPERTIES:
      :ID:       503C5A79-E2CB-4D2B-A7EF-D8C15AE7DBD9
      :END:
***** TODO The function resets all buffers if "n"
      :PROPERTIES:
      :ID:       9A5B3D3E-B495-4744-8541-65BD0BD560B4
      :END:
***** TODO The function, in case of y does something so that after I edit my wmd file, my layout goes back to the way it was before all this.
      :PROPERTIES:
      :ID:       EE8D2E05-9911-45E4-9016-91F8BCE84764
      :END:
**** TODO Make a function that will do a bunch of (add-hook )
     :PROPERTIES:
     :ID:       AA0B6701-A624-4076-8BBC-0D8094064DC7
     :END:
This is where I will put all the add-hook's for all the hook for all the events
that I want to have generate a "Bother me and ask me what I'm doing" requests.
*** TODO Ponder some mobile WMD solution, possibly just a note in my notes app.
    :PROPERTIES:
    :ID:       05885286-12DE-45CB-8BC3-B519FC3C8F0D
    :END:
Or maybe do something with org-mobile.
    :PROPERTIES:
    :ID:       31EC040C-9FA4-411F-B121-58D685F682D0
    :END:
*** TODO Font change on lose/gain focus in emacs
    :PROPERTIES:
    :ID:       9C3785CB-36AF-4BDE-974F-ECA7A7A0789A
    :END:
I want the font to shrink when the window loses focus and grow when the window
gains focus and possibly make the windows change size based on the one that has
focus.

Additionnaly, I could have a function like (grow) that would intelligently grow
the current window.
*** TODO Making window splitting better
    :PROPERTIES:
    :ID:       915C2AFA-E8A5-492E-9C30-F78AF5BBCC5E
    :END:
Something like when I split a window, it puts the new window with in dired mode
at the directory of the file.
Or any number of other things than just the same buffer as what I was already
looking at.

Why would I split my precious space to look at something that I<m already
looking at.  That would be rediculous.

Or simply, when i split a window, it puts me in that window and does helm recent
files to let me select a file and then it opens that file in the new split, and
optionnaly puts me back in the same window where I was.
*** TODO Change sgf_go_application
    :PROPERTIES:
    :ID:       88A3F22D-93F2-4202-8A9B-8281AF694F09
    :END:

 So that views register with models to be notified when there is a change. The
 controller will no longer make calls to the view.

*** TODO Terminate contract with bell 
    :PROPERTIES:
    :ID:       FAA6E22B-FE66-46B6-A8B1-E78B40D3FD01
    :END:
   [2018-07-05 Thu]
*** TODO Deploy my flask website on heroku 
    :PROPERTIES:
    :ID:       2879B50D-377A-478C-A522-56B696002679
    :END:
   [2018-07-05 Thu]
*** TODO Make a command like notes that opens up files in a bucket for org mode notes
    :PROPERTIES:
    :ID:       B2D163DF-0886-4495-A4E0-7380707686A1
    :END:
I.E.  Just make notes do "emacs $(note_name $1).org" 
*** TODO Integrate proper fetching in repo-manager.
    :PROPERTIES:
    :ID:       3E904B0E-DECC-4D35-AFF2-2983F3578274
    :END:
*** TODO Make this file and a couple others easily accessible
    :PROPERTIES:
    :ID:       2A63C35F-5014-44F3-BFF3-C20E81EB1C26
    :END:

I think there could be a container of structures that have Projects, Tasks,
Hobbies (or something).

*** TODO Guitar
    :PROPERTIES:
    :ID:       0E903027-55A1-4007-9866-0691AF463B60
    :END:
*** TODO Geochipmunk
    :PROPERTIES:
    :ID:       01EA8AD2-DA40-4C2C-86C2-DA488EAF3DFC
    :END:
*** TODO Enable Emacs Layers.
    :PROPERTIES:
    :ID:       F20D3062-4226-4FEE-B611-5C689C9F164F
    :END:
*** TODO Learn Emacs fundamentals
    :PROPERTIES:
    :ID:       8A177505-401E-419F-B4CD-3F52FF63C723
    :END:
*** TODO Implement command line add to incoming todos
    :PROPERTIES:
    :ID:       90F69D07-D6D5-4ADA-A50D-C1974CD0C490
    :END:
*** TODO See about ledger
    :PROPERTIES:
    :ID:       883DEA47-3EC8-490F-BF9A-DB7BED31625F
    :END:
*** TODO Focus manager
    :PROPERTIES:
    :ID:       8DE4A3F2-2D94-447B-B089-10B4FFA14B14
    :END:
**** Idea
What am I doing now. No matter how I figure out my state machines, I want
something to emulate what I do with my calepin. Having something on which it'
written what I'm doing now.

This todo is not about designing how to chose what I'm doing now, which is a
complex task. This is only to decide where this data will be stored and to
invent a means of displaying it.

**** DONE Chose where current todo will be stored
     CLOSED: [2018-07-15 Sun 00:09]
The todo will be stored in $NOTES_BUCKET/wmd.org and optionnaly a file that
might store a reference to the org-mode file.

The reason for the second file is that maybe some code might want to modify the
content of the file.  Besides streaming data to a file with shell io and
fprintf, and editing binary files with seeks and stuff, I don't know how to
modify an org-mode file.

**** DONE Choose what to store ANSWER org-mode references
     CLOSED: [2018-07-15 Sun 00:23]

*** TODO Commands to open certain files
    :PROPERTIES:
    :ID:       859052FD-D56A-4C99-A14C-F67FCEC6333E
    :END:
**** Idea
Having commands to open certain key files with whatever else.

Maybe a hard-coded command to open "~/Dropbox/Notes/Notes_BUCKET/todos.org"
Or a command that loads visits the org-mode link in a certain file that I change
when I want.

Or a special dedicated org-mode file with a curated list of links.  I have
Notes_Main.org but I could have a file like *org-bookmarks.org*.

**** TODO Use variables and give them persistence with files
     :PROPERTIES:
     :ID:       9C04B373-77E2-4CFA-83E6-D4E8B204A2EF
     :END:

**** TODO Accessing the info
     :PROPERTIES:
     :ID:       4CBE822B-5156-4092-8B85-4A292DB2BC83
     :END:
***** TODO Make a command line function printing that to the terminal
      :PROPERTIES:
      :ID:       02D770D5-D2AC-4DB2-B437-B55FA4BB872E
      :END:
***** TODO Make a spacemacs command to open that buffer
      :PROPERTIES:
      :ID:       BED2D24C-130B-4533-A9F6-80E266D940F9
      :END:
***** TODO Find a way to have that put in Spacemac's powerline
      :PROPERTIES:
      :ID:       94BDF92B-84B1-4BB1-92E1-7F9F03E16B42
      :END:
***** TODO Make that buffer open up when I start emacs
      :PROPERTIES:
      :ID:       E253DB90-E238-4EC2-96D9-3AA87A758BCA
      :END:
**** Ramblings
So maybe I could have an org-mode reference as text in a special file to have a
persistent org-mode reference that points anywhere I want.

Yeah, a variable or multiple variables that get persistence through the use of
files on disc, that have an org-mode reference.

C-this C-that on an org-mode link to set that link as the
phil-wmd-org-reference.

Then I quick shortcuts to bring up the org-mode file containing that reference.
And I can have maybe another org-mode file like this for say, ...

... ... ... ... the a notes file that is associted to what I'm working on.  For
example C-this C-that opens my wmd file, and C-this C-the-other opens
Notes_Documentation_SPI_SQLite.org because I'm at work ant that's what those
variables are set to.

*** TODO *IDEA* Migrate my existing documentation to orgmode
    :PROPERTIES:
    :ID:       B83A589E-87CD-4DB1-A614-E979CE66B1D2
    :END:




 

  
